#! /usr/bin/env python


import argparse
import os

#Orders of saved paths are consistent with path.txt.

PROJECT_DIR = os.path.dirname(os.path.abspath(__file__))


def register():
    parser = argparse.ArgumentParser("advanced cd manipulator")
    #parser.add_argument("path", nargs='?', default=os.getcwd(), type=str)
    parser.add_argument('-l', '--list', help='list all saved paths', action='store_true')
    parser.add_argument('-lr', '--list-reversed', help='list all saved paths in reversed order', action='store_true')
    parser.add_argument('-j', '--jump', help='jump to a specified path', nargs=1, action='store', metavar=('num'))
    parser.add_argument('-s', '--save', help='save a current path', action='store_true')
    parser.add_argument('-d', '--delete', help='delete a specified path', nargs=1, action='store', metavar=('num'))
    parser.add_argument('-c', '--change', help='change path order', nargs=2, action='store', metavar=('num', 'num'))
    args = parser.parse_args()

    return args


def load_file():
    file_path = PROJECT_DIR + '/paths.txt'

    with open(file_path, 'r+') as f:
        paths_list = [(num, line.rstrip()) for num, line in enumerate(f.readlines())]

    return paths_list


def write_file():
    file_path = PROJECT_DIR + '/paths.txt'

    with open(file_path, 'r+') as f:
        paths = [line.rstrip() for line in f.readlines()]

    if os.getcwd() not in paths:
        with open(file_path, 'a+') as f:
            f.write(os.getcwd() + '\n')


def swap_order(num1, num2):
    if num2 < num1:
        num1, num2 = num2, num1


def manipulation(args):
    if args.list:
        paths_list = load_file()
        for path in paths_list:
            print(path[0], path[1])

    if args.save:
        write_file()


if __name__ == '__main__':
    args = register()
    manipulation(args)

