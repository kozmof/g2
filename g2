#! /usr/bin/env python


import argparse
import os

#Orders of saved paths are consistent with path.txt.

PROJECT_DIR = os.path.dirname(os.path.abspath(__file__))


def register():
    parser = argparse.ArgumentParser("advanced cd manipulator")
    #parser.add_argument("path", nargs='?', default=os.getcwd(), type=str)
    parser.add_argument('-l', '--list', help='list all saved paths', action='store_true')
    parser.add_argument('-lr', '--list-reversed', help='list all saved paths in reversed order', action='store_true')
    parser.add_argument('-j', '--jump', help='jump to a specified path', nargs=1, action='store', metavar=('num'), type=int)
    parser.add_argument('-s', '--save', help='save a current path', action='store_true')
    parser.add_argument('-d', '--delete', help='delete a specified path', nargs=1, action='store', metavar=('num'), type=int)
    parser.add_argument('-c', '--change', help='change path order', nargs=2, action='store', metavar=('num', 'num'), type=int)
    args = parser.parse_args()

    return args


def load_file():
    file_path = PROJECT_DIR + '/paths.txt'

    with open(file_path, 'r+') as f:
        paths_list = [(num, line.rstrip()) for num, line in enumerate(f.readlines())]

    return paths_list


def write_file():
    file_path = PROJECT_DIR + '/paths.txt'

    with open(file_path, 'r+') as f:
        paths_list = [line.rstrip() for line in f.readlines()]

    if os.getcwd() not in paths_list:
        with open(file_path, 'a+') as f:
            f.write(os.getcwd() + '\n')


def delete_path(num):
    file_path = PROJECT_DIR + '/paths.txt'

    with open(file_path, 'r+') as f:
        paths_list = [line.rstrip() for line in f.readlines()]

    paths_list.pop(num)

    with open(file_path, 'w') as f:
        for path in paths_list:
            f.write(path + '\n')


def swap_order(num1, num2):
    file_path = PROJECT_DIR + '/paths.txt'

    with open(file_path, 'r+') as f:
        paths_list = [line.rstrip() for line in f.readlines()]

    paths_list[num1], paths_list[num2] = paths_list[num2], paths_list[num1] 

    with open(file_path, 'w') as f:
        for path in paths_list:
            f.write(path + '\n')


def reverse():
    file_path = PROJECT_DIR + '/paths.txt'

    with open(file_path, 'r+') as f:
        paths_list = [line.rstrip() for line in f.readlines()]

    with open(file_path, 'w') as f:
        for num, path in enumerate(reversed(paths_list)):
            f.write(path + '\n')
            print((num, path))


def manipulation(args):
    if args.list:
        paths_list = load_file()
        for path in paths_list:
            print(path[0], path[1])

    if args.save:
        write_file()

    if args.delete:
        delete_path(args.delete[0])

    if args.change:
        swap_order(args.change[0], args.change[1])

    if args.list_reversed:
        reverse()


if __name__ == '__main__':
    args = register()
    manipulation(args)

